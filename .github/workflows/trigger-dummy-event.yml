name: Trigger dummy event

on:
  workflow_dispatch:
    inputs:
      payload:
        description: 'The event payload'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Debug env vars
        shell: bash
        run: |
          echo -e "GITHUB_REPOSITORY: $GITHUB_REPOSITORY\n"
          echo -e "GITHUB_WORKSPACE: $GITHUB_WORKSPACE\n"
          echo -e "GITHUB_SHA: $GITHUB_SHA\n"
          echo -e "GITHUB_REF: $GITHUB_REF\n"
          echo -e "GITHUB_HEAD_REF: $GITHUB_HEAD_REF\n"
          echo -e "GITHUB_BASE_REF: $GITHUB_BASE_REF\n"
          echo -e "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME\n"
          echo -e "GITHUB_EVENT_PATH: $GITHUB_EVENT_PATH\n"
          echo -e "GITHUB_RUN_ID: $GITHUB_RUN_ID\n"
          echo -e "GITHUB_RUN_NUMBER: $GITHUB_RUN_NUMBER\n"

      - uses: actions/checkout@v2
        with:  
          submodules: 'true'

      - name: Setup Python
        uses: actions/setup-python@v2.3.1
        with:
          python-version: "3.9"

      - name: Setup Poetry
        run: |
          pip3 install poetry wheel
          poetry --version

      - name: Setup DVC
        uses: iterative/setup-dvc@v1

      - name: Install via Poetry
        run: |
          poetry install
          poetry build
          pip install --user "${{ github.workspace }}/dist/library_consumer-$(poetry version --short)-py3-none-any.whl"
          library-consumer --help

      - name: Create the event
        id: create-event
        run: |
          EVENT_ID=$(date)-${{ github.run_id }}-${{ github.run_number }}
          echo "::set-output name=event_id::$EVENT_ID"
          library-consumer create-dummy-event $EVENT_ID ${{ github.event.inputs.payload }}

      - name: Auto commit the event
        run: |
          git add gitmq/events/${{ steps.create-event.outputs.event_id }}.json
          git commit -S -m "new event ${{ steps.create-event.outputs.event_id }}"
          git push
